@page "/login"
@using BlazorServerAuthenticationAndAuthorization.Authentication
@using System.Security.Cryptography
@using System.Text
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {

    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }


    private Model model = new Model();

    private async Task Authenticate()
    {
        static string hashPassword(string password)
        {
            var sha = SHA256.Create();
            var asByteArray = Encoding.Default.GetBytes(password);
            var hashedPassword = sha.ComputeHash(asByteArray);
            return Convert.ToBase64String(hashedPassword);
        }

       
        string storedPassword = hashPassword("admin");
        string userPassword = hashPassword(model.Password);

        if (userPassword.Equals(storedPassword))
        {
            var userAccount = userAccountService.GetByUserName(model.UserName);
            if (userAccount == null || userAccount.Password != model.Password)
            {
                await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
                return;
            }

            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession
                {
                    UserName = userAccount.UserName,

                });
            navManager.NavigateTo("/", true);
        }
    }

}
